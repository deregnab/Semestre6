import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.MulticastSocket;

public class UDPServerMulticast {

	public static void main(String[] args) throws Exception {

		// int host = 8080;
		int host = 7654;
		MulticastSocket socket = new MulticastSocket(host);
		socket.joinGroup(InetAddress.getByName("224.0.0.1"));
		byte[] receiveData, sendData;

		/* Le serveur tourne sur une boucle infinie pour éviter qu'il ne se ferme. */
		while (true) {
			
			receiveData = new byte[1024];
			sendData = new byte[1024];
			/*
			 * Première étape : le serveur attend ici de recevoir un message. La
			 * méthode receive étant bloquante, l'exécution du code ne se
			 * poursuit pas tant que personne n'essaie de le contacter.
			 */
			
			DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);
			socket.receive(receivePacket);
			
			/* A l'aide de la méthode getData(), on récupère les données transmises */
			
			String sentence = new String(receivePacket.getData());
			System.out.println("RECEIVED: " + sentence);
			
			/* On récupère le port de l'envoyeur pour pouvoir lui retourner une réponse. */
			
			int port2 = receivePacket.getPort();
			InetAddress IPAddress = receivePacket.getAddress();
			String capitalizedSentence = sentence.toUpperCase();
			sendData = capitalizedSentence.getBytes();
			
			/* Enfin, on retourne une réponse au client */
			
			DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port2);
			socket.send(sendPacket);
		}
	}

}
